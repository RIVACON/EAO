{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Einfaches Beispiel \"Strom und Wärme\"\n",
    "\n",
    "Eine einfache Illustration, in der wir verschiedene Anlagen verbinden:\n",
    "* KWK Anlage\n",
    "* P2H (z.B. Wärmepumpe, Geothermie)\n",
    "* Wärmespeicher\n",
    "\n",
    "... plus (festem) Wärmebedarf und Strompreise\n",
    "\n",
    "Das Wärmenetz besteht aus \"Nord\", \"Süd\" plus Verbindung\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Ein paar Vorbereitungen in Python"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import eaopack as eao\n",
    "#####################################################\n",
    "import pandas as pd\n",
    "import datetime as dt\n",
    "import plotly.express as px"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Definition der \"Knoten\", also der grundsätzlichen Struktur\n",
    "\n",
    "Knoten bilden den virtuellen Punkt, in dem Wärme- und Stromanlagen angeschlossen sind. Die Knoten können durch \"Transporte\" verbunden werden"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Definition der phys. Einheiten\n",
    "unit_power      = eao.assets.Unit(volume = 'MWh(el)', flow = 'MW(el)')\n",
    "unit_heat       = eao.assets.Unit(volume = 'MWh(th)', flow = 'MW(th)')\n",
    "# Definition der Knoten\n",
    "node_power      = eao.assets.Node(name = 'strom'      , unit = unit_power)\n",
    "node_heat_nord  = eao.assets.Node(name = 'waerme_nord', unit = unit_heat)\n",
    "node_heat_sued  = eao.assets.Node(name = 'waerme_sued', unit = unit_heat)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Definition der einzelnen Anlagen und Verträge\n",
    "\n",
    "Notiz: Wir vermeiden eine grundsätzliche Unterscheidung zwischen phys. Anlagen und Verträgen. Z.B. \n",
    "* der Wärmebedarf kann auch als zu erfüllender Absatzvertrag gesehen werden\n",
    "* es könnten auch Strom-Terminverträge eingebunden werden (so physisch erfüllt)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "# (1) Wärmespeicher\n",
    "storage = eao.assets.Storage(name       = 'speicher', \n",
    "                            nodes       = node_heat_nord, \n",
    "                            cap_out     = .5, \n",
    "                            cap_in      = .5, \n",
    "                            size        = 3., \n",
    "                            start_level = 0.25, \n",
    "                            end_level   = 0.25,\n",
    "                            eff_in      = 0.9, \n",
    "                            block_size  = 'd')     # Speicher soll täglich neu optimiert werden (nicht \"leer hinterlassen\")\n",
    "\n",
    "# (2) Power to Heat Anlage (die Wärmepumpe). Hier vereinfacht abgebildet\n",
    "#     Wir können zu einem gegebenen Wirkungsgrad \"Strom in Wärme tauschen\"\n",
    "power2heat   = eao.assets.MultiCommodityContract(name = 'P2H',                           # Wärmepumpe (z.B. Geothermie)\n",
    "                                                 min_cap = 0, \n",
    "                                                 max_cap = 2, \n",
    "                                                 nodes = [node_power, node_heat_nord],   # Lokalisierung: Knoten Nord für Wärme  -  plus Stromknoten\n",
    "                                                 factors_commodities=[-1, 2])            # Wirkundsgrad: 1 MWh Strom zu 2 MWh Wärme\n",
    "\n",
    "# (3) Kraft-Wärme-Kopplung (KWK). Hier als GuD abgebildet\n",
    "#     Achtung - hier sind einige Parameter als Standardwerte gesetzt, die je nach Anwendungsfall angepasst werden sollten\n",
    "KWK    = eao.assets.CHPAsset(name = \"KWK\", \n",
    "                                   min_cap     = 0, \n",
    "                                   max_cap     = 5,                             # max. Leistung Strom\n",
    "                                   nodes       = [node_power, node_heat_sued],  # Erzeugung von Strom und Wärme in die entsprechenden Netze, bei Bedarf auch Gas\n",
    "                                   start_costs = 0,                             # im Beispiel keine Startkosten\n",
    "                                   extra_costs = 25,                            # Brennstoffkosten in €/MWh, natürlich auch als Zeitreihe möglich\n",
    "                                   conversion_factor_power_heat=0.5,            # Verhältnis Produktion Wärme zu Strom 2:1, d.h. 1MW Stromverlust bei 2MW Wärmeproduktion\n",
    "                                   max_share_heat = .5)                         # max. Anteil der Wärme an Gesamtproduktion (in MWh)\n",
    "                                   ### ..viele weitere Parameter möglich, siehe Dokumentation. Z.B. Rampen, Mindestlaufzeiten, etc.\n",
    "\n",
    "# (4) Wärmebedarf\n",
    "#     Der Wärmebedarf muss immer gedeckt werden. Hier als \"Contract\" abgebildet; Maximum = Minimum bedeutet \"keine Flexibilität\"\n",
    "bedarf_nord  = eao.assets.Contract(name = \"bedarf_nord\",  \n",
    "                                   min_cap  = \"waerme_bedarf_nord\", # Referenziert auf Bezeichnung in Datenquelle\n",
    "                                   max_cap  = \"waerme_bedarf_nord\", \n",
    "                                   nodes    = node_heat_nord)\n",
    "bedarf_sued  = eao.assets.Contract(name     = \"bedarf_sued\",\n",
    "                                   min_cap  = \"waerme_bedarf_sued\", \n",
    "                                   max_cap  = \"waerme_bedarf_sued\", \n",
    "                                   nodes = node_heat_sued)\n",
    "# (5) Wärmeübertragungsnetz. Hier als \"Transport\" Asset abgebildet\n",
    "#     Generell wird der Fluss immer in eine Richtung definiert. Daher im Beispiel 2 einzelne Richtungen Süd->Nord und Nord->Süd\n",
    "netz_nord_sued  = eao.assets.Transport(name = 'netz_ns', \n",
    "                                       max_cap = 2,                 # max. Wärmeübertragungskapazität\n",
    "                                       nodes = [node_heat_nord, node_heat_sued])\n",
    "netz_sued_nord  = eao.assets.Transport(name = 'netz_sn', \n",
    "                                       max_cap = 1.5,\n",
    "                                       nodes = [node_heat_sued, node_heat_nord])\n",
    "\n",
    "# (3) Strommarkt\n",
    "#     Wir können praktisch unbegrenzt Strom kaufen und verkaufen - zum vorgegebenen Preis\n",
    "market       = eao.assets.SimpleContract(name = 'strommarkt', price='strompreis', min_cap= -1000, max_cap=1000, nodes = node_power)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Portfolio zusammensetzen\n",
    "Die Anlagen und Verträge bilden die Details ab. Mit der Information zu den Knoten können sie einfach im Portfolio zusammengefasst werden\n",
    "* Szenarioanalyse mit und ohne Anlagen\n",
    "* auch viele Einzel-Portfolien möglich, falls nur Teile modelliert werden\n",
    "* Teil-Portfolien können bei Bedarf als eine Anlage im Gesamtmodell zusammengefasst werden"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "portf        = eao.portfolio.Portfolio([storage, \n",
    "                                        power2heat, \n",
    "                                        KWK, \n",
    "                                        market, \n",
    "                                        bedarf_nord, \n",
    "                                        bedarf_sued, \n",
    "                                        netz_nord_sued, \n",
    "                                        netz_sued_nord])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Graphische Darstellung\n",
    "Automatisch generiert. Im GUI kann die Darstellung angepasst werden.\n",
    "* Gelb: Knoten\n",
    "* Grau: Assets\n",
    "* Pfeile: Anbindung der Assets an Knoten oder Transport"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "eao.network_graphs.create_graph(portf = portf, title = 'Beispiel: Wärmenetz mit KWK, Wärmepumpe und Speicher')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Randbemerkung\n",
    "Das EAO ist so aufgesetzt, dass es einfach an eigene Datenbanken und Systeme angebunden werden kann.\n",
    "Z.B. können alle Daten einfach in JSON exportiert (und eingelesen) werden. So auch im GUI"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "## in JSON File speichern zur weiteren Verwendung, z.B. in eigener Datenbank, dem GUI, etc. Genauso für Assets, etc.\n",
    "eao.serialization.to_json(portf, 'portf.json')      # Gesamtbeispiel\n",
    "eao.serialization.to_json(storage, 'speicher.json')\n",
    "# ... etc. für alle Assets möglich'"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Daten laden\n",
    "Hier: Preise und Wärmebedarf aus Excel Datei laden"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>strompreis</th>\n",
       "      <th>waerme_bedarf_nord</th>\n",
       "      <th>waerme_bedarf_sued</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>datum</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2020-01-01 00:00:00</th>\n",
       "      <td>41.88</td>\n",
       "      <td>-2.11</td>\n",
       "      <td>-0.31</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-01-01 01:00:00</th>\n",
       "      <td>38.60</td>\n",
       "      <td>-2.17</td>\n",
       "      <td>-0.39</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-01-01 02:00:00</th>\n",
       "      <td>36.55</td>\n",
       "      <td>-2.20</td>\n",
       "      <td>-0.49</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-01-01 03:00:00</th>\n",
       "      <td>32.32</td>\n",
       "      <td>-2.20</td>\n",
       "      <td>-0.59</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-01-01 04:00:00</th>\n",
       "      <td>30.85</td>\n",
       "      <td>-2.17</td>\n",
       "      <td>-0.70</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                     strompreis  waerme_bedarf_nord  waerme_bedarf_sued\n",
       "datum                                                                  \n",
       "2020-01-01 00:00:00       41.88               -2.11               -0.31\n",
       "2020-01-01 01:00:00       38.60               -2.17               -0.39\n",
       "2020-01-01 02:00:00       36.55               -2.20               -0.49\n",
       "2020-01-01 03:00:00       32.32               -2.20               -0.59\n",
       "2020-01-01 04:00:00       30.85               -2.17               -0.70"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data = pd.read_excel(\"2020_sample_daten.xlsx\")\n",
    "data.set_index('datum', inplace=True)\n",
    "data.round(2).head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Optimierung durchführen"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "Start = dt.date(2020,1,1)\n",
    "End   = dt.date(2020,1,3)\n",
    "tg    = eao.assets.Timegrid(Start, End, freq = 'h')     # hier: stündlich optimieren\n",
    "out   = eao.optimize(portf = portf, timegrid = tg, data = data)\n",
    "### Solver nach Geschmack leicht austauschbar. Z.B. Gurobi, CPLEX, freie Solver: SCIP, HIGHS ...\n",
    "# out = eao.optimize(portf = portf, timegrid = tg, data = data, solver = 'SCIP')\n",
    "### Split problem\n",
    "out   = eao.optimize(portf = portf, timegrid = tg, data = data)\n",
    "# out   = eao.optimize(portf = portf, timegrid = tg, data = data, split_interval_size='MS')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Randnotiz \"Performance und Größenbeschränkung\":\n",
    "\n",
    "* MIP und LP: Kann das Portfolio als \"LP\" gelöst werden, ist die Rechenzeit deutlich schneller, als bei einem MIP. Hier kann über den Parameter \"make_soft_problem\" in der Optimierung gesteuert werden\n",
    "* Solver sind nach Geschmack leicht austauschbar. Z.B. Gurobi, CPLEX, freie Solver: SCIP, HIGHS ...\n",
    "* Generell erzeugen Speicher in der Optimierung leicht schwer lösbare Probleme. Hier empfehlen wir, die \"block_size\" z.B. auf täglich/wöchentlich zu setzen. So wird der Speicher nur über innerhalb jeden Tages / jeder Woche optimiert\n",
    "* \"Split Optimization\": Für die meisten Probleme ist es eine gute Näherung, das Problem für jede Woche/ jeden Monat etc. zu lösen. In der entsprechenden Variante setzt EAO die Lösung automatisch zusammen. Randbedingungen wie Speicher Level oder Mindestmengen werden heruntergebrochen"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Resultate analysieren\n",
    "Vereinfachte Darstellung. Im Normalfall Export nach Excel oder in eine Schnittstelle in Datenbanken"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Values</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Parameter</th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>status</th>\n",
       "      <td>successful</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>value</th>\n",
       "      <td>1267.861623</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                Values\n",
       "Parameter             \n",
       "status      successful\n",
       "value      1267.861623"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "out['summary'] # Zusammenfassung. Gesantwert in € (Deckungsbeitrag)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>2020-01-01 00:00:00</th>\n",
       "      <th>2020-01-01 01:00:00</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>speicher</th>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>P2H</th>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>KWK</th>\n",
       "      <td>-125.00</td>\n",
       "      <td>-125.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>strommarkt</th>\n",
       "      <td>164.02</td>\n",
       "      <td>143.65</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>bedarf_nord</th>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>bedarf_sued</th>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>netz_ns</th>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>netz_sn</th>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             2020-01-01 00:00:00  2020-01-01 01:00:00\n",
       "speicher                    0.00                 0.00\n",
       "P2H                         0.00                 0.00\n",
       "KWK                      -125.00              -125.00\n",
       "strommarkt                164.02               143.65\n",
       "bedarf_nord                 0.00                 0.00\n",
       "bedarf_sued                 0.00                 0.00\n",
       "netz_ns                     0.00                 0.00\n",
       "netz_sn                     0.00                 0.00"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "out['DCF'].transpose().iloc[:,0:2].round(2) # Detailsicht auf die Cash Flows (auch diskontierte Optimierung möglich (DCF / Maximierung des NPV))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                           2020-01-01 00:00:00  2020-01-01 01:00:00\n",
      "speicher (waerme_nord)                    0.25                 0.00\n",
      "P2H (strom)                              -0.73                -0.90\n",
      "P2H (waerme_nord)                         1.46                 1.80\n",
      "KWK (strom)                               4.65                 4.62\n",
      "KWK (waerme_sued)                         0.70                 0.76\n",
      "strommarkt (strom)                       -3.92                -3.72\n",
      "bedarf_nord (waerme_nord)                -2.11                -2.17\n",
      "bedarf_sued (waerme_sued)                -0.31                -0.39\n",
      "netz_ns (waerme_nord)                    -0.60                -0.61\n",
      "netz_ns (waerme_sued)                     0.60                 0.61\n",
      "netz_sn (waerme_sued)                    -0.99                -0.98\n",
      "netz_sn (waerme_nord)                     0.99                 0.98\n"
     ]
    }
   ],
   "source": [
    "# Detailsicht auf die Betriebsweise der Anlagen (in MWh)\n",
    "print(out['dispatch'].transpose().iloc[:,0:2].round(2)) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>2020-01-01 00:00:00</th>\n",
       "      <th>2020-01-01 01:00:00</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>nodal price: waerme_nord</th>\n",
       "      <td>20.94</td>\n",
       "      <td>19.30</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>nodal price: strom</th>\n",
       "      <td>41.88</td>\n",
       "      <td>38.60</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>nodal price: waerme_sued</th>\n",
       "      <td>20.94</td>\n",
       "      <td>19.30</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>input data: strompreis</th>\n",
       "      <td>41.88</td>\n",
       "      <td>38.60</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>input data: waerme_bedarf_nord</th>\n",
       "      <td>-2.11</td>\n",
       "      <td>-2.17</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>input data: waerme_bedarf_sued</th>\n",
       "      <td>-0.31</td>\n",
       "      <td>-0.39</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                2020-01-01 00:00:00  2020-01-01 01:00:00\n",
       "nodal price: waerme_nord                      20.94                19.30\n",
       "nodal price: strom                            41.88                38.60\n",
       "nodal price: waerme_sued                      20.94                19.30\n",
       "input data: strompreis                        41.88                38.60\n",
       "input data: waerme_bedarf_nord                -2.11                -2.17\n",
       "input data: waerme_bedarf_sued                -0.31                -0.39"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Detailsicht auf die EIngangsgrößen (in €/MWh bzw. MW)  [hier vor Allem die vorgegebenen Preise, andere Analysen möglich --> Kosten für die Wärme pro Stunde]\n",
    "out['prices'].transpose().iloc[:,0:2].round(2)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Darstellung in Graphiken -- zur Diskussion"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "application/vnd.plotly.v1+json": {
       "config": {
        "plotlyServerURL": "https://plot.ly"
       },
       "data": [
        {
         "hovertemplate": "variable=P2H (waerme_nord)<br>index=%{x}<br>value=%{y}<extra></extra>",
         "legendgroup": "P2H (waerme_nord)",
         "line": {
          "color": "#636efa",
          "dash": "solid"
         },
         "marker": {
          "symbol": "circle"
         },
         "mode": "lines",
         "name": "P2H (waerme_nord)",
         "orientation": "v",
         "showlegend": true,
         "type": "scatter",
         "x": [
          "2020-01-01T00:00:00.000000000",
          "2020-01-01T01:00:00.000000000",
          "2020-01-01T02:00:00.000000000",
          "2020-01-01T03:00:00.000000000",
          "2020-01-01T04:00:00.000000000",
          "2020-01-01T05:00:00.000000000",
          "2020-01-01T06:00:00.000000000",
          "2020-01-01T07:00:00.000000000",
          "2020-01-01T08:00:00.000000000",
          "2020-01-01T09:00:00.000000000",
          "2020-01-01T10:00:00.000000000",
          "2020-01-01T11:00:00.000000000",
          "2020-01-01T12:00:00.000000000",
          "2020-01-01T13:00:00.000000000",
          "2020-01-01T14:00:00.000000000",
          "2020-01-01T15:00:00.000000000",
          "2020-01-01T16:00:00.000000000",
          "2020-01-01T17:00:00.000000000",
          "2020-01-01T18:00:00.000000000",
          "2020-01-01T19:00:00.000000000",
          "2020-01-01T20:00:00.000000000",
          "2020-01-01T21:00:00.000000000",
          "2020-01-01T22:00:00.000000000",
          "2020-01-01T23:00:00.000000000",
          "2020-01-02T00:00:00.000000000",
          "2020-01-02T01:00:00.000000000",
          "2020-01-02T02:00:00.000000000",
          "2020-01-02T03:00:00.000000000",
          "2020-01-02T04:00:00.000000000",
          "2020-01-02T05:00:00.000000000",
          "2020-01-02T06:00:00.000000000",
          "2020-01-02T07:00:00.000000000",
          "2020-01-02T08:00:00.000000000",
          "2020-01-02T09:00:00.000000000",
          "2020-01-02T10:00:00.000000000",
          "2020-01-02T11:00:00.000000000",
          "2020-01-02T12:00:00.000000000",
          "2020-01-02T13:00:00.000000000",
          "2020-01-02T14:00:00.000000000",
          "2020-01-02T15:00:00.000000000",
          "2020-01-02T16:00:00.000000000",
          "2020-01-02T17:00:00.000000000",
          "2020-01-02T18:00:00.000000000",
          "2020-01-02T19:00:00.000000000",
          "2020-01-02T20:00:00.000000000",
          "2020-01-02T21:00:00.000000000",
          "2020-01-02T22:00:00.000000000",
          "2020-01-02T23:00:00.000000000"
         ],
         "xaxis": "x",
         "y": {
          "bdata": "qciTwJRm9z8uB+ZQ2b78Pzp3NN0yLf4/Cr4SDkBn/z9Pfi5x5ygAQBlnW3QYbQBArrbizxd4AEAv1q3eSFkAQMhup5CIAgBAXr0LhkcU/z9o5K8bs9z9P0F7KKyRVPw/zacnvaSG+j8t8rAAs6/4P6Vrj0tAlfY/9hon1o9q9D8TiFHbvTwBQL3A511pXgBA45S8FGyk/D/PyzMeMVQAQC65haBpBgBAlgVS8psU/j+95L2hWIjSPyO2NYuHrtA/sb4tV7HA4T+kL7YrVJTsPxa2HVcEfO0/ioOMmhMc7z8QRdWDdX3wPyY2I26xs/E/FHM/WrmG8j94xShYVkrqP6yYizE1P+4/OShG+e/I5D/dhXq98b7oP0B4NQCQl/U/WtITqy2D8D8Q4wEgaMf5P4foYSFKoPs/zfz2rc9A/T/6AF4h6pf+PwpR8fLfWvg//RpR+JYX+T8Y+OVs4HP5P1Gby2WrVwBAGY7sWRwtAEDm1owW5NcBQNzdsET+YAdA",
          "dtype": "f8"
         },
         "yaxis": "y"
        },
        {
         "hovertemplate": "variable=KWK (waerme_sued)<br>index=%{x}<br>value=%{y}<extra></extra>",
         "legendgroup": "KWK (waerme_sued)",
         "line": {
          "color": "#EF553B",
          "dash": "solid"
         },
         "marker": {
          "symbol": "circle"
         },
         "mode": "lines",
         "name": "KWK (waerme_sued)",
         "orientation": "v",
         "showlegend": true,
         "type": "scatter",
         "x": [
          "2020-01-01T00:00:00.000000000",
          "2020-01-01T01:00:00.000000000",
          "2020-01-01T02:00:00.000000000",
          "2020-01-01T03:00:00.000000000",
          "2020-01-01T04:00:00.000000000",
          "2020-01-01T05:00:00.000000000",
          "2020-01-01T06:00:00.000000000",
          "2020-01-01T07:00:00.000000000",
          "2020-01-01T08:00:00.000000000",
          "2020-01-01T09:00:00.000000000",
          "2020-01-01T10:00:00.000000000",
          "2020-01-01T11:00:00.000000000",
          "2020-01-01T12:00:00.000000000",
          "2020-01-01T13:00:00.000000000",
          "2020-01-01T14:00:00.000000000",
          "2020-01-01T15:00:00.000000000",
          "2020-01-01T16:00:00.000000000",
          "2020-01-01T17:00:00.000000000",
          "2020-01-01T18:00:00.000000000",
          "2020-01-01T19:00:00.000000000",
          "2020-01-01T20:00:00.000000000",
          "2020-01-01T21:00:00.000000000",
          "2020-01-01T22:00:00.000000000",
          "2020-01-01T23:00:00.000000000",
          "2020-01-02T00:00:00.000000000",
          "2020-01-02T01:00:00.000000000",
          "2020-01-02T02:00:00.000000000",
          "2020-01-02T03:00:00.000000000",
          "2020-01-02T04:00:00.000000000",
          "2020-01-02T05:00:00.000000000",
          "2020-01-02T06:00:00.000000000",
          "2020-01-02T07:00:00.000000000",
          "2020-01-02T08:00:00.000000000",
          "2020-01-02T09:00:00.000000000",
          "2020-01-02T10:00:00.000000000",
          "2020-01-02T11:00:00.000000000",
          "2020-01-02T12:00:00.000000000",
          "2020-01-02T13:00:00.000000000",
          "2020-01-02T14:00:00.000000000",
          "2020-01-02T15:00:00.000000000",
          "2020-01-02T16:00:00.000000000",
          "2020-01-02T17:00:00.000000000",
          "2020-01-02T18:00:00.000000000",
          "2020-01-02T19:00:00.000000000",
          "2020-01-02T20:00:00.000000000",
          "2020-01-02T21:00:00.000000000",
          "2020-01-02T22:00:00.000000000",
          "2020-01-02T23:00:00.000000000"
         ],
         "xaxis": "x",
         "y": {
          "bdata": "nYWE7omL5j/FCdSYBFXoP6/UFCL3fOk/A6ASUaJ76j+uv3Yv827rP/NYVCmIaOw/3SPoXVR67T97Bn7K+13uP9FUAdolSe8/kAlMkbjl7z9rybOr3CHwPxnZKWSrQvA/vc5SM3xU8D/LPw031ybwP7UGWKCJAvA/Q0Q2wHuI7z+gNp5lSBaSPfXLz00XMoI9S/sKDNl+gz0qHesvRAh3PbFmgpQWMnI9Sm0fP8ixcj0aLof/4xTfP3RmGPbClNs/9mhod7M75D+cqk+d2ILmP9JdcQc8U+U/m6/Xx21D5D/sSNZdBcnjP6fZncRJi+M/hiqfVcfO5D/7VczXmCHjP+FQ9ppSSeM/eEU8IOhL4T+NCj3fqTHiP36pbD06yuQ/R0JrmQEF5D+yM84/2nPmP0q/cF9ze+c/64fv41CU6D9C2MdKscHpP0gALhGpfek/AcQoYlCV6j8eHngBz6rrP9SGlLchMu4/rEldgb8D7z9At22PzUXwP/zZjBjOXUA+",
          "dtype": "f8"
         },
         "yaxis": "y"
        },
        {
         "hovertemplate": "variable=speicher (waerme_nord)<br>index=%{x}<br>value=%{y}<extra></extra>",
         "legendgroup": "speicher (waerme_nord)",
         "line": {
          "color": "#00cc96",
          "dash": "solid"
         },
         "marker": {
          "symbol": "circle"
         },
         "mode": "lines",
         "name": "speicher (waerme_nord)",
         "orientation": "v",
         "showlegend": true,
         "type": "scatter",
         "x": [
          "2020-01-01T00:00:00.000000000",
          "2020-01-01T01:00:00.000000000",
          "2020-01-01T02:00:00.000000000",
          "2020-01-01T03:00:00.000000000",
          "2020-01-01T04:00:00.000000000",
          "2020-01-01T05:00:00.000000000",
          "2020-01-01T06:00:00.000000000",
          "2020-01-01T07:00:00.000000000",
          "2020-01-01T08:00:00.000000000",
          "2020-01-01T09:00:00.000000000",
          "2020-01-01T10:00:00.000000000",
          "2020-01-01T11:00:00.000000000",
          "2020-01-01T12:00:00.000000000",
          "2020-01-01T13:00:00.000000000",
          "2020-01-01T14:00:00.000000000",
          "2020-01-01T15:00:00.000000000",
          "2020-01-01T16:00:00.000000000",
          "2020-01-01T17:00:00.000000000",
          "2020-01-01T18:00:00.000000000",
          "2020-01-01T19:00:00.000000000",
          "2020-01-01T20:00:00.000000000",
          "2020-01-01T21:00:00.000000000",
          "2020-01-01T22:00:00.000000000",
          "2020-01-01T23:00:00.000000000",
          "2020-01-02T00:00:00.000000000",
          "2020-01-02T01:00:00.000000000",
          "2020-01-02T02:00:00.000000000",
          "2020-01-02T03:00:00.000000000",
          "2020-01-02T04:00:00.000000000",
          "2020-01-02T05:00:00.000000000",
          "2020-01-02T06:00:00.000000000",
          "2020-01-02T07:00:00.000000000",
          "2020-01-02T08:00:00.000000000",
          "2020-01-02T09:00:00.000000000",
          "2020-01-02T10:00:00.000000000",
          "2020-01-02T11:00:00.000000000",
          "2020-01-02T12:00:00.000000000",
          "2020-01-02T13:00:00.000000000",
          "2020-01-02T14:00:00.000000000",
          "2020-01-02T15:00:00.000000000",
          "2020-01-02T16:00:00.000000000",
          "2020-01-02T17:00:00.000000000",
          "2020-01-02T18:00:00.000000000",
          "2020-01-02T19:00:00.000000000",
          "2020-01-02T20:00:00.000000000",
          "2020-01-02T21:00:00.000000000",
          "2020-01-02T22:00:00.000000000",
          "2020-01-02T23:00:00.000000000"
         ],
         "xaxis": "x",
         "y": {
          "bdata": "pTL+/v//zz/AFsUijdzUPfAIy5Uk7tM9HgNgNQL7/71f1s6kRXERvnXwyGZyMCO+orFYKhmOFb55pm82wNcXvgnq06/ZWvO9bM4BCpio7b30Vbu/Z9f7vaJi98uqRPO9MMitX8zE3z2+QzIDQxf4vSAUR+KWqKQ9wWSoM25IPT6Id3aZmZmpvxw/RJqZmbm/AAAAgGuh6j00nqqZmZnZv7UP8v///9+/FnDw////37+ixf3////fP7Gs/f///98/aWeQKMdxrL/S7bD////fv6Y4w////9+/Vd/P////37/L+dH////fv4ZV0P///9+/T+Zc////37/dpvDfBd7wPUazDGngNjY+/bdL+v//3z9Tr1T+///fPx9fSkZLXFU+qfm27P//3z+KLZ256/0oPlWA1vovtfw9zAXeomYPIj5f1sL4kI4IPgceF////98/8WFr////3z+fIqL5///fP8Cw+A9MNrA9FXYkqBkGAr617hBxHMfRv0A59uVsAc69",
          "dtype": "f8"
         },
         "yaxis": "y"
        },
        {
         "hovertemplate": "variable=bedarf_nord (waerme_nord)<br>index=%{x}<br>value=%{y}<extra></extra>",
         "legendgroup": "bedarf_nord (waerme_nord)",
         "line": {
          "color": "#ab63fa",
          "dash": "solid"
         },
         "marker": {
          "symbol": "circle"
         },
         "mode": "lines",
         "name": "bedarf_nord (waerme_nord)",
         "orientation": "v",
         "showlegend": true,
         "type": "scatter",
         "x": [
          "2020-01-01T00:00:00.000000000",
          "2020-01-01T01:00:00.000000000",
          "2020-01-01T02:00:00.000000000",
          "2020-01-01T03:00:00.000000000",
          "2020-01-01T04:00:00.000000000",
          "2020-01-01T05:00:00.000000000",
          "2020-01-01T06:00:00.000000000",
          "2020-01-01T07:00:00.000000000",
          "2020-01-01T08:00:00.000000000",
          "2020-01-01T09:00:00.000000000",
          "2020-01-01T10:00:00.000000000",
          "2020-01-01T11:00:00.000000000",
          "2020-01-01T12:00:00.000000000",
          "2020-01-01T13:00:00.000000000",
          "2020-01-01T14:00:00.000000000",
          "2020-01-01T15:00:00.000000000",
          "2020-01-01T16:00:00.000000000",
          "2020-01-01T17:00:00.000000000",
          "2020-01-01T18:00:00.000000000",
          "2020-01-01T19:00:00.000000000",
          "2020-01-01T20:00:00.000000000",
          "2020-01-01T21:00:00.000000000",
          "2020-01-01T22:00:00.000000000",
          "2020-01-01T23:00:00.000000000",
          "2020-01-02T00:00:00.000000000",
          "2020-01-02T01:00:00.000000000",
          "2020-01-02T02:00:00.000000000",
          "2020-01-02T03:00:00.000000000",
          "2020-01-02T04:00:00.000000000",
          "2020-01-02T05:00:00.000000000",
          "2020-01-02T06:00:00.000000000",
          "2020-01-02T07:00:00.000000000",
          "2020-01-02T08:00:00.000000000",
          "2020-01-02T09:00:00.000000000",
          "2020-01-02T10:00:00.000000000",
          "2020-01-02T11:00:00.000000000",
          "2020-01-02T12:00:00.000000000",
          "2020-01-02T13:00:00.000000000",
          "2020-01-02T14:00:00.000000000",
          "2020-01-02T15:00:00.000000000",
          "2020-01-02T16:00:00.000000000",
          "2020-01-02T17:00:00.000000000",
          "2020-01-02T18:00:00.000000000",
          "2020-01-02T19:00:00.000000000",
          "2020-01-02T20:00:00.000000000",
          "2020-01-02T21:00:00.000000000",
          "2020-01-02T22:00:00.000000000",
          "2020-01-02T23:00:00.000000000"
         ],
         "xaxis": "x",
         "y": {
          "bdata": "UNykBXDdAMCM8CAg7FEBwP/oCuKijwHArFt8dN6UAcBYyKS3eWEBwE20Kkrh9gDAq3RSbglYAMDW/ykpshL/v5mPvEAVIf2/Py4OiQbp+r9IqqQvRHr4vwRBGnkQ5vW/HgACT7c+87/KlhFxDJfwv5o8S8XLA+y/9+1qkCwj579KfXvR1a7iv5LDJLbDjN2/uZ+NHBUL179TFRhLyQbSv6HPJNHvRs2/hzQtk1Tyyb+o+lHRYSfKvxDDNymf5M2/EEOup8KH0r8I7o8inbrXv580iw/9Zd6/zTb+lkgt47+WmfRS9K/nv+Sl1boBm+y/0aA4IMbl8L+KNucqYY7zv2RfJFJ1NPa/Av8M2DfF+L+VYdM+dS77vz0yQWoSX/2/GoAF/IVH/79H3utGI20AwAq3pV0VBgHAkFQGKVxqAcADhFs7MJcBwBepwYlTiwHAA1mMPBpHAcBTWzRaaMwAwPu2V12kHgDAijX0KT6F/r91y0j04nz8v1h4otqiMvq/",
          "dtype": "f8"
         },
         "yaxis": "y"
        },
        {
         "hovertemplate": "variable=bedarf_sued (waerme_sued)<br>index=%{x}<br>value=%{y}<extra></extra>",
         "legendgroup": "bedarf_sued (waerme_sued)",
         "line": {
          "color": "#FFA15A",
          "dash": "solid"
         },
         "marker": {
          "symbol": "circle"
         },
         "mode": "lines",
         "name": "bedarf_sued (waerme_sued)",
         "orientation": "v",
         "showlegend": true,
         "type": "scatter",
         "x": [
          "2020-01-01T00:00:00.000000000",
          "2020-01-01T01:00:00.000000000",
          "2020-01-01T02:00:00.000000000",
          "2020-01-01T03:00:00.000000000",
          "2020-01-01T04:00:00.000000000",
          "2020-01-01T05:00:00.000000000",
          "2020-01-01T06:00:00.000000000",
          "2020-01-01T07:00:00.000000000",
          "2020-01-01T08:00:00.000000000",
          "2020-01-01T09:00:00.000000000",
          "2020-01-01T10:00:00.000000000",
          "2020-01-01T11:00:00.000000000",
          "2020-01-01T12:00:00.000000000",
          "2020-01-01T13:00:00.000000000",
          "2020-01-01T14:00:00.000000000",
          "2020-01-01T15:00:00.000000000",
          "2020-01-01T16:00:00.000000000",
          "2020-01-01T17:00:00.000000000",
          "2020-01-01T18:00:00.000000000",
          "2020-01-01T19:00:00.000000000",
          "2020-01-01T20:00:00.000000000",
          "2020-01-01T21:00:00.000000000",
          "2020-01-01T22:00:00.000000000",
          "2020-01-01T23:00:00.000000000",
          "2020-01-02T00:00:00.000000000",
          "2020-01-02T01:00:00.000000000",
          "2020-01-02T02:00:00.000000000",
          "2020-01-02T03:00:00.000000000",
          "2020-01-02T04:00:00.000000000",
          "2020-01-02T05:00:00.000000000",
          "2020-01-02T06:00:00.000000000",
          "2020-01-02T07:00:00.000000000",
          "2020-01-02T08:00:00.000000000",
          "2020-01-02T09:00:00.000000000",
          "2020-01-02T10:00:00.000000000",
          "2020-01-02T11:00:00.000000000",
          "2020-01-02T12:00:00.000000000",
          "2020-01-02T13:00:00.000000000",
          "2020-01-02T14:00:00.000000000",
          "2020-01-02T15:00:00.000000000",
          "2020-01-02T16:00:00.000000000",
          "2020-01-02T17:00:00.000000000",
          "2020-01-02T18:00:00.000000000",
          "2020-01-02T19:00:00.000000000",
          "2020-01-02T20:00:00.000000000",
          "2020-01-02T21:00:00.000000000",
          "2020-01-02T22:00:00.000000000",
          "2020-01-02T23:00:00.000000000"
         ],
         "xaxis": "x",
         "y": {
          "bdata": "zGSwsebF07+EiE10DRbZv4UsuKiiMd+/a7cGm6j24r9jDRIVqozmv/0c5NBkQeq/JLt844367b/EUBF53c7wv4edf82OiPK/m7+URR0e9L8lLKOXS4T1v67OJJcssfa/oGeAoWmc97/ug5TGfT/4v1V5Qgnklfi/BE3hbzed+L8Q5hkBRFX4v/4wojQIwPe/nqSmzabh9r+8ATeDScD1v6dm6kb1Y/S/rFXwX1HW8r/odibuYiLxvyz0V3Z9qO6/x/81CGfx6r9kbOU33jnnv1nd59ZBnOO/xQx+yzgy4L9LeUYl+Cfav8HqTMxVr9S/97f8k1sh0L8UqiFpszzJv6MbAKx0fsS/OC85mqEpwr8RlOx4xE7Cv99sDdDV7MS/1o6Nt0Pxyb8Dv2TLOpzQvzw9rldkR9W/b0vKOf/Y2r97BHigxJTgvw6Nlc8aBuS/9EZPYBWo579bskNv7mDrv/YeZtk9Fu+/Sn9vStpW8b/rXfqr6wbzv+Q8x7BZj/S/",
          "dtype": "f8"
         },
         "yaxis": "y"
        },
        {
         "hovertemplate": "variable=input data: strompreis<br>index=%{x}<br>value=%{y}<extra></extra>",
         "legendgroup": "input data: strompreis",
         "line": {
          "color": "#19d3f3",
          "dash": "solid"
         },
         "marker": {
          "symbol": "circle"
         },
         "mode": "lines",
         "name": "input data: strompreis",
         "orientation": "v",
         "showlegend": true,
         "type": "scatter",
         "x": [
          "2020-01-01T00:00:00.000000000",
          "2020-01-01T01:00:00.000000000",
          "2020-01-01T02:00:00.000000000",
          "2020-01-01T03:00:00.000000000",
          "2020-01-01T04:00:00.000000000",
          "2020-01-01T05:00:00.000000000",
          "2020-01-01T06:00:00.000000000",
          "2020-01-01T07:00:00.000000000",
          "2020-01-01T08:00:00.000000000",
          "2020-01-01T09:00:00.000000000",
          "2020-01-01T10:00:00.000000000",
          "2020-01-01T11:00:00.000000000",
          "2020-01-01T12:00:00.000000000",
          "2020-01-01T13:00:00.000000000",
          "2020-01-01T14:00:00.000000000",
          "2020-01-01T15:00:00.000000000",
          "2020-01-01T16:00:00.000000000",
          "2020-01-01T17:00:00.000000000",
          "2020-01-01T18:00:00.000000000",
          "2020-01-01T19:00:00.000000000",
          "2020-01-01T20:00:00.000000000",
          "2020-01-01T21:00:00.000000000",
          "2020-01-01T22:00:00.000000000",
          "2020-01-01T23:00:00.000000000",
          "2020-01-02T00:00:00.000000000",
          "2020-01-02T01:00:00.000000000",
          "2020-01-02T02:00:00.000000000",
          "2020-01-02T03:00:00.000000000",
          "2020-01-02T04:00:00.000000000",
          "2020-01-02T05:00:00.000000000",
          "2020-01-02T06:00:00.000000000",
          "2020-01-02T07:00:00.000000000",
          "2020-01-02T08:00:00.000000000",
          "2020-01-02T09:00:00.000000000",
          "2020-01-02T10:00:00.000000000",
          "2020-01-02T11:00:00.000000000",
          "2020-01-02T12:00:00.000000000",
          "2020-01-02T13:00:00.000000000",
          "2020-01-02T14:00:00.000000000",
          "2020-01-02T15:00:00.000000000",
          "2020-01-02T16:00:00.000000000",
          "2020-01-02T17:00:00.000000000",
          "2020-01-02T18:00:00.000000000",
          "2020-01-02T19:00:00.000000000",
          "2020-01-02T20:00:00.000000000",
          "2020-01-02T21:00:00.000000000",
          "2020-01-02T22:00:00.000000000",
          "2020-01-02T23:00:00.000000000"
         ],
         "xaxis": "x",
         "y": {
          "bdata": "cT0K16PwREDNzMzMzExDQGZmZmZmRkJAKVyPwvUoQECamZmZmdk+QKRwPQrXIz5A7FG4HoUrPkAAAAAAAAA+QGZmZmZmpj5AZmZmZmamPkCF61G4HkU+QNejcD0KVz5APQrXo3D9PkAK16NwPQo+QAAAAAAAwD5ArkfhehQOQEA9CtejcP1BwJqZmZmZGVTAMzMzMzPDUsCamZmZmQlewGZmZmZm7mHA9ihcj8KVYcDD9ShcjyJEQM3MzMzMbEFAMzMzMzOzQUB7FK5H4fo/QAAAAAAAgD5ACtejcD3KPEDsUbgehWs8QAAAAAAAwDxAFK5H4XoUQUApXI/C9QhFQFK4HoXrcUZA4XoUrkehRkApXI/C9chGQOxRuB6Fi0ZAFK5H4XqURkAzMzMzM3NGQEjhehSuB0ZA7FG4HoVrRkAzMzMzMzNGQGZmZmZmBkdAXI/C9ShcR0DhehSuR6FGQClcj8L1qENASOF6FK4HQUBcj8L1KBxAQD0K16Nw/ThA",
          "dtype": "f8"
         },
         "yaxis": "y"
        }
       ],
       "layout": {
        "legend": {
         "title": {
          "text": "variable"
         },
         "tracegroupgap": 0
        },
        "template": {
         "data": {
          "bar": [
           {
            "error_x": {
             "color": "#2a3f5f"
            },
            "error_y": {
             "color": "#2a3f5f"
            },
            "marker": {
             "line": {
              "color": "#E5ECF6",
              "width": 0.5
             },
             "pattern": {
              "fillmode": "overlay",
              "size": 10,
              "solidity": 0.2
             }
            },
            "type": "bar"
           }
          ],
          "barpolar": [
           {
            "marker": {
             "line": {
              "color": "#E5ECF6",
              "width": 0.5
             },
             "pattern": {
              "fillmode": "overlay",
              "size": 10,
              "solidity": 0.2
             }
            },
            "type": "barpolar"
           }
          ],
          "carpet": [
           {
            "aaxis": {
             "endlinecolor": "#2a3f5f",
             "gridcolor": "white",
             "linecolor": "white",
             "minorgridcolor": "white",
             "startlinecolor": "#2a3f5f"
            },
            "baxis": {
             "endlinecolor": "#2a3f5f",
             "gridcolor": "white",
             "linecolor": "white",
             "minorgridcolor": "white",
             "startlinecolor": "#2a3f5f"
            },
            "type": "carpet"
           }
          ],
          "choropleth": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "type": "choropleth"
           }
          ],
          "contour": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "contour"
           }
          ],
          "contourcarpet": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "type": "contourcarpet"
           }
          ],
          "heatmap": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "heatmap"
           }
          ],
          "histogram": [
           {
            "marker": {
             "pattern": {
              "fillmode": "overlay",
              "size": 10,
              "solidity": 0.2
             }
            },
            "type": "histogram"
           }
          ],
          "histogram2d": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "histogram2d"
           }
          ],
          "histogram2dcontour": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "histogram2dcontour"
           }
          ],
          "mesh3d": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "type": "mesh3d"
           }
          ],
          "parcoords": [
           {
            "line": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "parcoords"
           }
          ],
          "pie": [
           {
            "automargin": true,
            "type": "pie"
           }
          ],
          "scatter": [
           {
            "fillpattern": {
             "fillmode": "overlay",
             "size": 10,
             "solidity": 0.2
            },
            "type": "scatter"
           }
          ],
          "scatter3d": [
           {
            "line": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scatter3d"
           }
          ],
          "scattercarpet": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scattercarpet"
           }
          ],
          "scattergeo": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scattergeo"
           }
          ],
          "scattergl": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scattergl"
           }
          ],
          "scattermap": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scattermap"
           }
          ],
          "scattermapbox": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scattermapbox"
           }
          ],
          "scatterpolar": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scatterpolar"
           }
          ],
          "scatterpolargl": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scatterpolargl"
           }
          ],
          "scatterternary": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scatterternary"
           }
          ],
          "surface": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "surface"
           }
          ],
          "table": [
           {
            "cells": {
             "fill": {
              "color": "#EBF0F8"
             },
             "line": {
              "color": "white"
             }
            },
            "header": {
             "fill": {
              "color": "#C8D4E3"
             },
             "line": {
              "color": "white"
             }
            },
            "type": "table"
           }
          ]
         },
         "layout": {
          "annotationdefaults": {
           "arrowcolor": "#2a3f5f",
           "arrowhead": 0,
           "arrowwidth": 1
          },
          "autotypenumbers": "strict",
          "coloraxis": {
           "colorbar": {
            "outlinewidth": 0,
            "ticks": ""
           }
          },
          "colorscale": {
           "diverging": [
            [
             0,
             "#8e0152"
            ],
            [
             0.1,
             "#c51b7d"
            ],
            [
             0.2,
             "#de77ae"
            ],
            [
             0.3,
             "#f1b6da"
            ],
            [
             0.4,
             "#fde0ef"
            ],
            [
             0.5,
             "#f7f7f7"
            ],
            [
             0.6,
             "#e6f5d0"
            ],
            [
             0.7,
             "#b8e186"
            ],
            [
             0.8,
             "#7fbc41"
            ],
            [
             0.9,
             "#4d9221"
            ],
            [
             1,
             "#276419"
            ]
           ],
           "sequential": [
            [
             0,
             "#0d0887"
            ],
            [
             0.1111111111111111,
             "#46039f"
            ],
            [
             0.2222222222222222,
             "#7201a8"
            ],
            [
             0.3333333333333333,
             "#9c179e"
            ],
            [
             0.4444444444444444,
             "#bd3786"
            ],
            [
             0.5555555555555556,
             "#d8576b"
            ],
            [
             0.6666666666666666,
             "#ed7953"
            ],
            [
             0.7777777777777778,
             "#fb9f3a"
            ],
            [
             0.8888888888888888,
             "#fdca26"
            ],
            [
             1,
             "#f0f921"
            ]
           ],
           "sequentialminus": [
            [
             0,
             "#0d0887"
            ],
            [
             0.1111111111111111,
             "#46039f"
            ],
            [
             0.2222222222222222,
             "#7201a8"
            ],
            [
             0.3333333333333333,
             "#9c179e"
            ],
            [
             0.4444444444444444,
             "#bd3786"
            ],
            [
             0.5555555555555556,
             "#d8576b"
            ],
            [
             0.6666666666666666,
             "#ed7953"
            ],
            [
             0.7777777777777778,
             "#fb9f3a"
            ],
            [
             0.8888888888888888,
             "#fdca26"
            ],
            [
             1,
             "#f0f921"
            ]
           ]
          },
          "colorway": [
           "#636efa",
           "#EF553B",
           "#00cc96",
           "#ab63fa",
           "#FFA15A",
           "#19d3f3",
           "#FF6692",
           "#B6E880",
           "#FF97FF",
           "#FECB52"
          ],
          "font": {
           "color": "#2a3f5f"
          },
          "geo": {
           "bgcolor": "white",
           "lakecolor": "white",
           "landcolor": "#E5ECF6",
           "showlakes": true,
           "showland": true,
           "subunitcolor": "white"
          },
          "hoverlabel": {
           "align": "left"
          },
          "hovermode": "closest",
          "mapbox": {
           "style": "light"
          },
          "paper_bgcolor": "white",
          "plot_bgcolor": "#E5ECF6",
          "polar": {
           "angularaxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           },
           "bgcolor": "#E5ECF6",
           "radialaxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           }
          },
          "scene": {
           "xaxis": {
            "backgroundcolor": "#E5ECF6",
            "gridcolor": "white",
            "gridwidth": 2,
            "linecolor": "white",
            "showbackground": true,
            "ticks": "",
            "zerolinecolor": "white"
           },
           "yaxis": {
            "backgroundcolor": "#E5ECF6",
            "gridcolor": "white",
            "gridwidth": 2,
            "linecolor": "white",
            "showbackground": true,
            "ticks": "",
            "zerolinecolor": "white"
           },
           "zaxis": {
            "backgroundcolor": "#E5ECF6",
            "gridcolor": "white",
            "gridwidth": 2,
            "linecolor": "white",
            "showbackground": true,
            "ticks": "",
            "zerolinecolor": "white"
           }
          },
          "shapedefaults": {
           "line": {
            "color": "#2a3f5f"
           }
          },
          "ternary": {
           "aaxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           },
           "baxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           },
           "bgcolor": "#E5ECF6",
           "caxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           }
          },
          "title": {
           "x": 0.05
          },
          "xaxis": {
           "automargin": true,
           "gridcolor": "white",
           "linecolor": "white",
           "ticks": "",
           "title": {
            "standoff": 15
           },
           "zerolinecolor": "white",
           "zerolinewidth": 2
          },
          "yaxis": {
           "automargin": true,
           "gridcolor": "white",
           "linecolor": "white",
           "ticks": "",
           "title": {
            "standoff": 15
           },
           "zerolinecolor": "white",
           "zerolinewidth": 2
          }
         }
        },
        "title": {
         "text": "Wärme Fahrplan"
        },
        "xaxis": {
         "anchor": "y",
         "domain": [
          0,
          1
         ],
         "title": {
          "text": "index"
         }
        },
        "yaxis": {
         "anchor": "x",
         "domain": [
          0,
          1
         ],
         "title": {
          "text": "value"
         }
        }
       }
      }
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "df = out['dispatch'].reset_index()\n",
    "df = pd.merge(df, out['prices'], left_on='index', right_index=True, how='left')\n",
    "fig = px.line(df, x=\"index\", y=[\"P2H (waerme_nord)\",\n",
    "                                \"KWK (waerme_sued)\",\n",
    "                                \"speicher (waerme_nord)\",\n",
    "                                \"bedarf_nord (waerme_nord)\",\n",
    "                                \"bedarf_sued (waerme_sued)\",\n",
    "                                \"input data: strompreis\"], \n",
    "                                title='Wärme Fahrplan')\n",
    "fig.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "application/vnd.plotly.v1+json": {
       "config": {
        "plotlyServerURL": "https://plot.ly"
       },
       "data": [
        {
         "hovertemplate": "variable=P2H (strom)<br>index=%{x}<br>value=%{y}<extra></extra>",
         "legendgroup": "P2H (strom)",
         "line": {
          "color": "#636efa",
          "dash": "solid"
         },
         "marker": {
          "symbol": "circle"
         },
         "mode": "lines",
         "name": "P2H (strom)",
         "orientation": "v",
         "showlegend": true,
         "type": "scatter",
         "x": [
          "2020-01-01T00:00:00.000000000",
          "2020-01-01T01:00:00.000000000",
          "2020-01-01T02:00:00.000000000",
          "2020-01-01T03:00:00.000000000",
          "2020-01-01T04:00:00.000000000",
          "2020-01-01T05:00:00.000000000",
          "2020-01-01T06:00:00.000000000",
          "2020-01-01T07:00:00.000000000",
          "2020-01-01T08:00:00.000000000",
          "2020-01-01T09:00:00.000000000",
          "2020-01-01T10:00:00.000000000",
          "2020-01-01T11:00:00.000000000",
          "2020-01-01T12:00:00.000000000",
          "2020-01-01T13:00:00.000000000",
          "2020-01-01T14:00:00.000000000",
          "2020-01-01T15:00:00.000000000",
          "2020-01-01T16:00:00.000000000",
          "2020-01-01T17:00:00.000000000",
          "2020-01-01T18:00:00.000000000",
          "2020-01-01T19:00:00.000000000",
          "2020-01-01T20:00:00.000000000",
          "2020-01-01T21:00:00.000000000",
          "2020-01-01T22:00:00.000000000",
          "2020-01-01T23:00:00.000000000",
          "2020-01-02T00:00:00.000000000",
          "2020-01-02T01:00:00.000000000",
          "2020-01-02T02:00:00.000000000",
          "2020-01-02T03:00:00.000000000",
          "2020-01-02T04:00:00.000000000",
          "2020-01-02T05:00:00.000000000",
          "2020-01-02T06:00:00.000000000",
          "2020-01-02T07:00:00.000000000",
          "2020-01-02T08:00:00.000000000",
          "2020-01-02T09:00:00.000000000",
          "2020-01-02T10:00:00.000000000",
          "2020-01-02T11:00:00.000000000",
          "2020-01-02T12:00:00.000000000",
          "2020-01-02T13:00:00.000000000",
          "2020-01-02T14:00:00.000000000",
          "2020-01-02T15:00:00.000000000",
          "2020-01-02T16:00:00.000000000",
          "2020-01-02T17:00:00.000000000",
          "2020-01-02T18:00:00.000000000",
          "2020-01-02T19:00:00.000000000",
          "2020-01-02T20:00:00.000000000",
          "2020-01-02T21:00:00.000000000",
          "2020-01-02T22:00:00.000000000",
          "2020-01-02T23:00:00.000000000"
         ],
         "xaxis": "x",
         "y": {
          "bdata": "qciTwJRm578uB+ZQ2b7svzp3NN0yLe6/Cr4SDkBn779Pfi5x5yjwvxlnW3QYbfC/rrbizxd48L8v1q3eSFnwv8hup5CIAvC/Xr0LhkcU779o5K8bs9ztv0F7KKyRVOy/zacnvaSG6r8t8rAAs6/ov6Vrj0tAlea/9hon1o9q5L8TiFHbvTzxv73A511pXvC/45S8FGyk7L/PyzMeMVTwvy65haBpBvC/lgVS8psU7r+95L2hWIjCvyO2NYuHrsC/sb4tV7HA0b+kL7YrVJTcvxa2HVcEfN2/ioOMmhMc378QRdWDdX3gvyY2I26xs+G/FHM/WrmG4r94xShYVkrav6yYizE1P96/OShG+e/I1L/dhXq98b7Yv0B4NQCQl+W/WtITqy2D4L8Q4wEgaMfpv4foYSFKoOu/zfz2rc9A7b/6AF4h6pfuvwpR8fLfWui//RpR+JYX6b8Y+OVs4HPpv1Gby2WrV/C/GY7sWRwt8L/m1owW5Nfxv9zdsET+YPe/",
          "dtype": "f8"
         },
         "yaxis": "y"
        },
        {
         "hovertemplate": "variable=KWK (strom)<br>index=%{x}<br>value=%{y}<extra></extra>",
         "legendgroup": "KWK (strom)",
         "line": {
          "color": "#EF553B",
          "dash": "solid"
         },
         "marker": {
          "symbol": "circle"
         },
         "mode": "lines",
         "name": "KWK (strom)",
         "orientation": "v",
         "showlegend": true,
         "type": "scatter",
         "x": [
          "2020-01-01T00:00:00.000000000",
          "2020-01-01T01:00:00.000000000",
          "2020-01-01T02:00:00.000000000",
          "2020-01-01T03:00:00.000000000",
          "2020-01-01T04:00:00.000000000",
          "2020-01-01T05:00:00.000000000",
          "2020-01-01T06:00:00.000000000",
          "2020-01-01T07:00:00.000000000",
          "2020-01-01T08:00:00.000000000",
          "2020-01-01T09:00:00.000000000",
          "2020-01-01T10:00:00.000000000",
          "2020-01-01T11:00:00.000000000",
          "2020-01-01T12:00:00.000000000",
          "2020-01-01T13:00:00.000000000",
          "2020-01-01T14:00:00.000000000",
          "2020-01-01T15:00:00.000000000",
          "2020-01-01T16:00:00.000000000",
          "2020-01-01T17:00:00.000000000",
          "2020-01-01T18:00:00.000000000",
          "2020-01-01T19:00:00.000000000",
          "2020-01-01T20:00:00.000000000",
          "2020-01-01T21:00:00.000000000",
          "2020-01-01T22:00:00.000000000",
          "2020-01-01T23:00:00.000000000",
          "2020-01-02T00:00:00.000000000",
          "2020-01-02T01:00:00.000000000",
          "2020-01-02T02:00:00.000000000",
          "2020-01-02T03:00:00.000000000",
          "2020-01-02T04:00:00.000000000",
          "2020-01-02T05:00:00.000000000",
          "2020-01-02T06:00:00.000000000",
          "2020-01-02T07:00:00.000000000",
          "2020-01-02T08:00:00.000000000",
          "2020-01-02T09:00:00.000000000",
          "2020-01-02T10:00:00.000000000",
          "2020-01-02T11:00:00.000000000",
          "2020-01-02T12:00:00.000000000",
          "2020-01-02T13:00:00.000000000",
          "2020-01-02T14:00:00.000000000",
          "2020-01-02T15:00:00.000000000",
          "2020-01-02T16:00:00.000000000",
          "2020-01-02T17:00:00.000000000",
          "2020-01-02T18:00:00.000000000",
          "2020-01-02T19:00:00.000000000",
          "2020-01-02T20:00:00.000000000",
          "2020-01-02T21:00:00.000000000",
          "2020-01-02T22:00:00.000000000",
          "2020-01-02T23:00:00.000000000"
         ],
         "xaxis": "x",
         "y": {
          "bdata": "l1QXYUeXEkCORHK2r3oSQFUi3o0waBJAIPPt2kVYEkBfdwfNEEkSQNx1aX13ORJAYzsgulooEkBM0lZDIBoSQFfEXqJtCxJAGRnqdqQBEkAxS4hqxPsRQHKNeZOq9xFAtJCUeXD1EUDHDR0ZJfsRQAze88uu/xFA1bH7Q3gHEkChushsKsK2PRoVY5GnHKg9sPUtVGiqqT1skahPtzKgPdzZ4LFNsJo9xMz67/5Imz24WgPgWAcTQOGRTuhZIxNAs9qIyES8EkAyFip20pcSQKe1hz/MqhJAjr2AI8m7EkCAoSCqb8MSQExVtGNLxxJAg1mlihOzEkDm2YJy5s0SQHJHUNZqyxJAnen7fUHrEkB63gti5dwSQITiKFxcsxJAPvlo5q+/EkAIyQJcwpgSQIScCMpIiBJAnLPA8bp2EkCwLFPr5GMSQGfR7G4laBJA3ifd+apWEkB5LOgPU0USQJlChuTdHBJAaXPpB8QPEkASYxFORvcRQBeSE9dqdoI+",
          "dtype": "f8"
         },
         "yaxis": "y"
        },
        {
         "hovertemplate": "variable=input data: strompreis<br>index=%{x}<br>value=%{y}<extra></extra>",
         "legendgroup": "input data: strompreis",
         "line": {
          "color": "#00cc96",
          "dash": "solid"
         },
         "marker": {
          "symbol": "circle"
         },
         "mode": "lines",
         "name": "input data: strompreis",
         "orientation": "v",
         "showlegend": true,
         "type": "scatter",
         "x": [
          "2020-01-01T00:00:00.000000000",
          "2020-01-01T01:00:00.000000000",
          "2020-01-01T02:00:00.000000000",
          "2020-01-01T03:00:00.000000000",
          "2020-01-01T04:00:00.000000000",
          "2020-01-01T05:00:00.000000000",
          "2020-01-01T06:00:00.000000000",
          "2020-01-01T07:00:00.000000000",
          "2020-01-01T08:00:00.000000000",
          "2020-01-01T09:00:00.000000000",
          "2020-01-01T10:00:00.000000000",
          "2020-01-01T11:00:00.000000000",
          "2020-01-01T12:00:00.000000000",
          "2020-01-01T13:00:00.000000000",
          "2020-01-01T14:00:00.000000000",
          "2020-01-01T15:00:00.000000000",
          "2020-01-01T16:00:00.000000000",
          "2020-01-01T17:00:00.000000000",
          "2020-01-01T18:00:00.000000000",
          "2020-01-01T19:00:00.000000000",
          "2020-01-01T20:00:00.000000000",
          "2020-01-01T21:00:00.000000000",
          "2020-01-01T22:00:00.000000000",
          "2020-01-01T23:00:00.000000000",
          "2020-01-02T00:00:00.000000000",
          "2020-01-02T01:00:00.000000000",
          "2020-01-02T02:00:00.000000000",
          "2020-01-02T03:00:00.000000000",
          "2020-01-02T04:00:00.000000000",
          "2020-01-02T05:00:00.000000000",
          "2020-01-02T06:00:00.000000000",
          "2020-01-02T07:00:00.000000000",
          "2020-01-02T08:00:00.000000000",
          "2020-01-02T09:00:00.000000000",
          "2020-01-02T10:00:00.000000000",
          "2020-01-02T11:00:00.000000000",
          "2020-01-02T12:00:00.000000000",
          "2020-01-02T13:00:00.000000000",
          "2020-01-02T14:00:00.000000000",
          "2020-01-02T15:00:00.000000000",
          "2020-01-02T16:00:00.000000000",
          "2020-01-02T17:00:00.000000000",
          "2020-01-02T18:00:00.000000000",
          "2020-01-02T19:00:00.000000000",
          "2020-01-02T20:00:00.000000000",
          "2020-01-02T21:00:00.000000000",
          "2020-01-02T22:00:00.000000000",
          "2020-01-02T23:00:00.000000000"
         ],
         "xaxis": "x",
         "y": {
          "bdata": "cT0K16PwREDNzMzMzExDQGZmZmZmRkJAKVyPwvUoQECamZmZmdk+QKRwPQrXIz5A7FG4HoUrPkAAAAAAAAA+QGZmZmZmpj5AZmZmZmamPkCF61G4HkU+QNejcD0KVz5APQrXo3D9PkAK16NwPQo+QAAAAAAAwD5ArkfhehQOQEA9CtejcP1BwJqZmZmZGVTAMzMzMzPDUsCamZmZmQlewGZmZmZm7mHA9ihcj8KVYcDD9ShcjyJEQM3MzMzMbEFAMzMzMzOzQUB7FK5H4fo/QAAAAAAAgD5ACtejcD3KPEDsUbgehWs8QAAAAAAAwDxAFK5H4XoUQUApXI/C9QhFQFK4HoXrcUZA4XoUrkehRkApXI/C9chGQOxRuB6Fi0ZAFK5H4XqURkAzMzMzM3NGQEjhehSuB0ZA7FG4HoVrRkAzMzMzMzNGQGZmZmZmBkdAXI/C9ShcR0DhehSuR6FGQClcj8L1qENASOF6FK4HQUBcj8L1KBxAQD0K16Nw/ThA",
          "dtype": "f8"
         },
         "yaxis": "y"
        }
       ],
       "layout": {
        "legend": {
         "title": {
          "text": "variable"
         },
         "tracegroupgap": 0
        },
        "template": {
         "data": {
          "bar": [
           {
            "error_x": {
             "color": "#2a3f5f"
            },
            "error_y": {
             "color": "#2a3f5f"
            },
            "marker": {
             "line": {
              "color": "#E5ECF6",
              "width": 0.5
             },
             "pattern": {
              "fillmode": "overlay",
              "size": 10,
              "solidity": 0.2
             }
            },
            "type": "bar"
           }
          ],
          "barpolar": [
           {
            "marker": {
             "line": {
              "color": "#E5ECF6",
              "width": 0.5
             },
             "pattern": {
              "fillmode": "overlay",
              "size": 10,
              "solidity": 0.2
             }
            },
            "type": "barpolar"
           }
          ],
          "carpet": [
           {
            "aaxis": {
             "endlinecolor": "#2a3f5f",
             "gridcolor": "white",
             "linecolor": "white",
             "minorgridcolor": "white",
             "startlinecolor": "#2a3f5f"
            },
            "baxis": {
             "endlinecolor": "#2a3f5f",
             "gridcolor": "white",
             "linecolor": "white",
             "minorgridcolor": "white",
             "startlinecolor": "#2a3f5f"
            },
            "type": "carpet"
           }
          ],
          "choropleth": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "type": "choropleth"
           }
          ],
          "contour": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "contour"
           }
          ],
          "contourcarpet": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "type": "contourcarpet"
           }
          ],
          "heatmap": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "heatmap"
           }
          ],
          "histogram": [
           {
            "marker": {
             "pattern": {
              "fillmode": "overlay",
              "size": 10,
              "solidity": 0.2
             }
            },
            "type": "histogram"
           }
          ],
          "histogram2d": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "histogram2d"
           }
          ],
          "histogram2dcontour": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "histogram2dcontour"
           }
          ],
          "mesh3d": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "type": "mesh3d"
           }
          ],
          "parcoords": [
           {
            "line": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "parcoords"
           }
          ],
          "pie": [
           {
            "automargin": true,
            "type": "pie"
           }
          ],
          "scatter": [
           {
            "fillpattern": {
             "fillmode": "overlay",
             "size": 10,
             "solidity": 0.2
            },
            "type": "scatter"
           }
          ],
          "scatter3d": [
           {
            "line": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scatter3d"
           }
          ],
          "scattercarpet": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scattercarpet"
           }
          ],
          "scattergeo": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scattergeo"
           }
          ],
          "scattergl": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scattergl"
           }
          ],
          "scattermap": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scattermap"
           }
          ],
          "scattermapbox": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scattermapbox"
           }
          ],
          "scatterpolar": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scatterpolar"
           }
          ],
          "scatterpolargl": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scatterpolargl"
           }
          ],
          "scatterternary": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scatterternary"
           }
          ],
          "surface": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "surface"
           }
          ],
          "table": [
           {
            "cells": {
             "fill": {
              "color": "#EBF0F8"
             },
             "line": {
              "color": "white"
             }
            },
            "header": {
             "fill": {
              "color": "#C8D4E3"
             },
             "line": {
              "color": "white"
             }
            },
            "type": "table"
           }
          ]
         },
         "layout": {
          "annotationdefaults": {
           "arrowcolor": "#2a3f5f",
           "arrowhead": 0,
           "arrowwidth": 1
          },
          "autotypenumbers": "strict",
          "coloraxis": {
           "colorbar": {
            "outlinewidth": 0,
            "ticks": ""
           }
          },
          "colorscale": {
           "diverging": [
            [
             0,
             "#8e0152"
            ],
            [
             0.1,
             "#c51b7d"
            ],
            [
             0.2,
             "#de77ae"
            ],
            [
             0.3,
             "#f1b6da"
            ],
            [
             0.4,
             "#fde0ef"
            ],
            [
             0.5,
             "#f7f7f7"
            ],
            [
             0.6,
             "#e6f5d0"
            ],
            [
             0.7,
             "#b8e186"
            ],
            [
             0.8,
             "#7fbc41"
            ],
            [
             0.9,
             "#4d9221"
            ],
            [
             1,
             "#276419"
            ]
           ],
           "sequential": [
            [
             0,
             "#0d0887"
            ],
            [
             0.1111111111111111,
             "#46039f"
            ],
            [
             0.2222222222222222,
             "#7201a8"
            ],
            [
             0.3333333333333333,
             "#9c179e"
            ],
            [
             0.4444444444444444,
             "#bd3786"
            ],
            [
             0.5555555555555556,
             "#d8576b"
            ],
            [
             0.6666666666666666,
             "#ed7953"
            ],
            [
             0.7777777777777778,
             "#fb9f3a"
            ],
            [
             0.8888888888888888,
             "#fdca26"
            ],
            [
             1,
             "#f0f921"
            ]
           ],
           "sequentialminus": [
            [
             0,
             "#0d0887"
            ],
            [
             0.1111111111111111,
             "#46039f"
            ],
            [
             0.2222222222222222,
             "#7201a8"
            ],
            [
             0.3333333333333333,
             "#9c179e"
            ],
            [
             0.4444444444444444,
             "#bd3786"
            ],
            [
             0.5555555555555556,
             "#d8576b"
            ],
            [
             0.6666666666666666,
             "#ed7953"
            ],
            [
             0.7777777777777778,
             "#fb9f3a"
            ],
            [
             0.8888888888888888,
             "#fdca26"
            ],
            [
             1,
             "#f0f921"
            ]
           ]
          },
          "colorway": [
           "#636efa",
           "#EF553B",
           "#00cc96",
           "#ab63fa",
           "#FFA15A",
           "#19d3f3",
           "#FF6692",
           "#B6E880",
           "#FF97FF",
           "#FECB52"
          ],
          "font": {
           "color": "#2a3f5f"
          },
          "geo": {
           "bgcolor": "white",
           "lakecolor": "white",
           "landcolor": "#E5ECF6",
           "showlakes": true,
           "showland": true,
           "subunitcolor": "white"
          },
          "hoverlabel": {
           "align": "left"
          },
          "hovermode": "closest",
          "mapbox": {
           "style": "light"
          },
          "paper_bgcolor": "white",
          "plot_bgcolor": "#E5ECF6",
          "polar": {
           "angularaxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           },
           "bgcolor": "#E5ECF6",
           "radialaxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           }
          },
          "scene": {
           "xaxis": {
            "backgroundcolor": "#E5ECF6",
            "gridcolor": "white",
            "gridwidth": 2,
            "linecolor": "white",
            "showbackground": true,
            "ticks": "",
            "zerolinecolor": "white"
           },
           "yaxis": {
            "backgroundcolor": "#E5ECF6",
            "gridcolor": "white",
            "gridwidth": 2,
            "linecolor": "white",
            "showbackground": true,
            "ticks": "",
            "zerolinecolor": "white"
           },
           "zaxis": {
            "backgroundcolor": "#E5ECF6",
            "gridcolor": "white",
            "gridwidth": 2,
            "linecolor": "white",
            "showbackground": true,
            "ticks": "",
            "zerolinecolor": "white"
           }
          },
          "shapedefaults": {
           "line": {
            "color": "#2a3f5f"
           }
          },
          "ternary": {
           "aaxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           },
           "baxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           },
           "bgcolor": "#E5ECF6",
           "caxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           }
          },
          "title": {
           "x": 0.05
          },
          "xaxis": {
           "automargin": true,
           "gridcolor": "white",
           "linecolor": "white",
           "ticks": "",
           "title": {
            "standoff": 15
           },
           "zerolinecolor": "white",
           "zerolinewidth": 2
          },
          "yaxis": {
           "automargin": true,
           "gridcolor": "white",
           "linecolor": "white",
           "ticks": "",
           "title": {
            "standoff": 15
           },
           "zerolinecolor": "white",
           "zerolinewidth": 2
          }
         }
        },
        "title": {
         "text": "Strom Fahrplan"
        },
        "xaxis": {
         "anchor": "y",
         "domain": [
          0,
          1
         ],
         "title": {
          "text": "index"
         }
        },
        "yaxis": {
         "anchor": "x",
         "domain": [
          0,
          1
         ],
         "title": {
          "text": "value"
         }
        }
       }
      }
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "df = out['dispatch'].reset_index()\n",
    "df = pd.merge(df, out['prices'], left_on='index', right_index=True, how='left')\n",
    "fig = px.line(df, x=\"index\", y=[\"P2H (strom)\",\n",
    "                                \"KWK (strom)\",\n",
    "                                \"input data: strompreis\"], \n",
    "                                title='Strom Fahrplan')\n",
    "fig.show()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "play",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.3"
  },
  "orig_nbformat": 2
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
